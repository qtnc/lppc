diff --git a/src/llex.c b/src/llex.c
index 5fc39a5..4224d8e 100644
--- a/src/llex.c
+++ b/src/llex.c
@@ -235,11 +235,11 @@ static int read_numeral (LexState *ls, SemInfo *seminfo) {
   for (;;) {
     if (check_next2(ls, expo))  /* exponent mark? */
       check_next2(ls, "-+");  /* optional exponent sign */
-    else if (lisxdigit(ls->current) || ls->current == '.')  /* '%x|%.' */
+    else if (lisxdigit(ls->current) || ls->current == '.' || ls->current == '_')  /* '%x|%.' */
       save_and_next(ls);
     else break;
   }
-  if (lislalpha(ls->current))  /* is numeral touching a letter? */
+  if (lislalpha(ls->current) && ls->current != '_')  /* is numeral touching a letter? */
     save_and_next(ls);  /* force an error */
   save(ls, '\0');
   if (luaO_str2num(luaZ_buffer(ls->buff), &obj) == 0)  /* format error? */
diff --git a/src/lobject.c b/src/lobject.c
index 9cfa522..68be38b 100644
--- a/src/lobject.c
+++ b/src/lobject.c
@@ -282,13 +282,24 @@ static const char *l_str2int (const char *s, lua_Integer *result) {
   if (s[0] == '0' &&
       (s[1] == 'x' || s[1] == 'X')) {  /* hex? */
     s += 2;  /* skip '0x' */
-    for (; lisxdigit(cast_uchar(*s)); s++) {
+    for (; lisxdigit(cast_uchar(*s)) || *s == '_'; s++) {
+      if (*s == '_') continue;
       a = a * 16 + luaO_hexavalue(*s);
       empty = 0;
     }
   }
+  else if (s[0] == '0' &&
+      (s[1] == 'b' || s[1] == 'B')) {  /* binary? */
+    s += 2;  /* skip '0x' */
+    for (; *s == '0' || *s == '1' || *s == '_'; s++) {
+      if (*s == '_') continue;
+      a = a * 2 + (*s - '0');
+      empty = 0;
+    }
+  }
   else {  /* decimal */
-    for (; lisdigit(cast_uchar(*s)); s++) {
+    for (; lisdigit(cast_uchar(*s)) || *s=='_'; s++) {
+      if (*s == '_') continue;
       int d = *s - '0';
       if (a >= MAXBY10 && (a > MAXBY10 || d > MAXLASTD + neg))  /* overflow? */
         return NULL;  /* do not accept it (as integer) */
