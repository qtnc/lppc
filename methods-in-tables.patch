diff --git a/src/lparser.c b/src/lparser.c
index 1ac8299..6399e3e 100644
--- a/src/lparser.c
+++ b/src/lparser.c
@@ -863,6 +863,24 @@ static void recfield (LexState *ls, ConsControl *cc) {
   fs->freereg = reg;  /* free registers */
 }
 
+static void body (LexState *ls, expdesc *e, int ismethod, int line);
+
+static int funcfield (LexState *ls, ConsControl *cc) {
+  /* funcfield -> FUNCTION funcname body */
+  FuncState *fs = ls->fs;
+  int reg = ls->fs->freereg;
+  expdesc tab, key, b;
+  luaX_next(ls);  /* skip FUNCTION */
+    checklimit(fs, cc->nh, MAX_INT, "items in a constructor");
+    codename(ls, &key);
+  cc->nh++;
+  tab = *cc->t;
+  luaK_indexed(fs, &tab, &key);
+  body(ls, &b, 1, ls->linenumber);
+  luaK_storevar(fs, &tab, &b);
+  fs->freereg = reg;  /* free registers */
+  return 1;
+}
 
 static void closelistfield (FuncState *fs, ConsControl *cc) {
   if (cc->v.k == VVOID) return;  /* there is no list item */
@@ -899,8 +917,9 @@ static void listfield (LexState *ls, ConsControl *cc) {
 }
 
 
-static void field (LexState *ls, ConsControl *cc) {
+static int field (LexState *ls, ConsControl *cc) {
   /* field -> listfield | recfield */
+  int nocomma = 0;
   switch(ls->t.token) {
     case TK_NAME: {  /* may be 'listfield' or 'recfield' */
       if (luaX_lookahead(ls) != '=')  /* expression? */
@@ -913,11 +932,19 @@ static void field (LexState *ls, ConsControl *cc) {
       recfield(ls, cc);
       break;
     }
+    case TK_FUNCTION: {
+      if (luaX_lookahead(ls) != TK_NAME)  
+        listfield(ls, cc);
+      else
+        nocomma = funcfield(ls, cc);
+      break;
+    }
     default: {
       listfield(ls, cc);
       break;
     }
   }
+  return nocomma;
 }
 
 
@@ -927,6 +954,7 @@ static void constructor (LexState *ls, expdesc *t) {
   FuncState *fs = ls->fs;
   int line = ls->linenumber;
   int pc = luaK_codeABC(fs, OP_NEWTABLE, 0, 0, 0);
+  int nocomma = 0;
   ConsControl cc;
   luaK_code(fs, 0);  /* space for extra arg. */
   cc.na = cc.nh = cc.tostore = 0;
@@ -939,8 +967,8 @@ static void constructor (LexState *ls, expdesc *t) {
     lua_assert(cc.v.k == VVOID || cc.tostore > 0);
     if (ls->t.token == '}') break;
     closelistfield(fs, &cc);
-    field(ls, &cc);
-  } while (testnext(ls, ',') || testnext(ls, ';'));
+    nocomma = field(ls, &cc);
+  } while (testnext(ls, ',') || testnext(ls, ';') || nocomma);
   check_match(ls, '}', '{', line);
   lastlistfield(fs, &cc);
   luaK_settablesize(fs, pc, t->u.info, cc.na, cc.nh);
