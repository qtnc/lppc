diff --git a/src/lcode.c b/src/lcode.c
index 8761614..d73b7fe 100644
--- a/src/lcode.c
+++ b/src/lcode.c
@@ -996,7 +996,7 @@ void luaK_exp2val (FuncState *fs, expdesc *e) {
 ** Try to make 'e' a K expression with an index in the range of R/K
 ** indices. Return true iff succeeded.
 */
-static int luaK_exp2K (FuncState *fs, expdesc *e) {
+/*static*/ int luaK_exp2K (FuncState *fs, expdesc *e) {
   if (!hasjumps(e)) {
     int info;
     switch (e->k) {  /* move constants to 'k' */
diff --git a/src/lparser.c b/src/lparser.c
index 2b888c7..97f1008 100644
--- a/src/lparser.c
+++ b/src/lparser.c
@@ -1722,6 +1722,26 @@ static void checktoclose (FuncState *fs, int level) {
   }
 }
 
+static void extractlocal (LexState* ls, int nvars) {
+FuncState* fs = ls->fs;
+expdesc e, v;
+  Vardesc *var;
+int firstvar = fs->nactvar;
+      luaK_nil(fs, fs->freereg, nvars);
+    adjustlocalvars(ls, nvars);
+  luaK_checkstack(fs, 1);
+fs->freereg += nvars;
+expr(ls, &e);
+fs->freereg -= nvars;
+init_exp(&v, VLOCAL, firstvar + nvars);
+luaK_storevar(fs, &v, &e);
+for (int i=0; i<nvars; i++) {
+  var = getlocalvardesc(fs, firstvar+i);
+codestring(&e, var->vd.name);
+luaK_exp2K(fs, &e);
+luaK_codeABC(fs, OP_GETFIELD, var->vd.ridx, firstvar + nvars, e.u.info);
+}
+}
 
 static void localstat (LexState *ls) {
   /* stat -> LOCAL NAME ATTRIB { ',' NAME ATTRIB } ['=' explist] */
@@ -1745,6 +1765,10 @@ static void localstat (LexState *ls) {
   } while (testnext(ls, ','));
   if (testnext(ls, '='))
     nexps = explist(ls, &e);
+  else if (testnext(ls, TK_IN)) {
+extractlocal(ls, nvars);
+return;
+  }
   else {
     e.k = VVOID;
     nexps = 0;
