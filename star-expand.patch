diff --git a/src/lcode.c b/src/lcode.c
index 8761614..f7b288f 100644
--- a/src/lcode.c
+++ b/src/lcode.c
@@ -1811,6 +1811,7 @@ void luaK_setlist (FuncState *fs, int base, int nelems, int tostore) {
   lua_assert(tostore != 0 && tostore <= LFIELDS_PER_FLUSH);
   if (tostore == LUA_MULTRET)
     tostore = 0;
+    nelems++;
   if (nelems <= MAXARG_C)
     luaK_codeABC(fs, OP_SETLIST, base, tostore, nelems);
   else {
diff --git a/src/lparser.c b/src/lparser.c
index 2b888c7..ac37424 100644
--- a/src/lparser.c
+++ b/src/lparser.c
@@ -841,6 +841,7 @@ typedef struct ConsControl {
   int nh;  /* total number of 'record' elements */
   int na;  /* number of array elements already stored */
   int tostore;  /* number of array elements pending to be stored */
+  int naundef; /* non-zero if exact number of elements not known */
 } ConsControl;
 
 
@@ -870,7 +871,7 @@ static void closelistfield (FuncState *fs, ConsControl *cc) {
   luaK_exp2nextreg(fs, &cc->v);
   cc->v.k = VVOID;
   if (cc->tostore == LFIELDS_PER_FLUSH) {
-    luaK_setlist(fs, cc->t->u.info, cc->na, cc->tostore);  /* flush */
+    luaK_setlist(fs, cc->t->u.info, cc->naundef? LUA_MULTRET  : cc->na, cc->tostore);  /* flush */
     cc->na += cc->tostore;
     cc->tostore = 0;  /* no more items pending */
   }
@@ -881,15 +882,16 @@ static void lastlistfield (FuncState *fs, ConsControl *cc) {
   if (cc->tostore == 0) return;
   if (hasmultret(cc->v.k)) {
     luaK_setmultret(fs, &cc->v);
-    luaK_setlist(fs, cc->t->u.info, cc->na, LUA_MULTRET);
+    luaK_setlist(fs, cc->t->u.info, cc->naundef? LUA_MULTRET : cc->na, LUA_MULTRET);
     cc->na--;  /* do not count last expression (unknown number of elements) */
   }
   else {
     if (cc->v.k != VVOID)
       luaK_exp2nextreg(fs, &cc->v);
-    luaK_setlist(fs, cc->t->u.info, cc->na, cc->tostore);
+    luaK_setlist(fs, cc->t->u.info, cc->naundef? LUA_MULTRET : cc->na, cc->tostore);
   }
   cc->na += cc->tostore;
+  cc->tostore = 0;
 }
 
 
@@ -928,9 +930,10 @@ static void constructor (LexState *ls, expdesc *t) {
   FuncState *fs = ls->fs;
   int line = ls->linenumber;
   int pc = luaK_codeABC(fs, OP_NEWTABLE, 0, 0, 0);
+int doflush = 0;
   ConsControl cc;
   luaK_code(fs, 0);  /* space for extra arg. */
-  cc.na = cc.nh = cc.tostore = 0;
+  cc.na = cc.nh = cc.tostore = cc.naundef = 0;
   cc.t = t;
   init_exp(t, VNONRELOC, fs->freereg);  /* table will be at stack top */
   luaK_reserveregs(fs, 1);
@@ -939,9 +942,14 @@ static void constructor (LexState *ls, expdesc *t) {
   do {
     lua_assert(cc.v.k == VVOID || cc.tostore > 0);
     if (ls->t.token == '}') break;
-    closelistfield(fs, &cc);
+    if (doflush && cc.tostore>0 && hasmultret(cc.v.k)) {
+      lastlistfield(fs, &cc);
+      cc.naundef=1;
+    }
+    else closelistfield(fs, &cc);
+    doflush = testnext(ls, '*');
     field(ls, &cc);
-  } while (testnext(ls, ',') || testnext(ls, ';'));
+  } while (testnext(ls, ',') || testnext(ls, ';') );
   check_match(ls, '}', '{', line);
   lastlistfield(fs, &cc);
   luaK_settablesize(fs, pc, t->u.info, cc.na, cc.nh);
diff --git a/src/lvm.c b/src/lvm.c
index fcd24e1..c59e534 100644
--- a/src/lvm.c
+++ b/src/lvm.c
@@ -1847,6 +1847,8 @@ void luaV_execute (lua_State *L, CallInfo *ci) {
         int n = GETARG_B(i);
         unsigned int last = GETARG_C(i);
         Table *h = hvalue(s2v(ra));
+        if (last == 0)
+          last = luaH_getn(h) + 1;
         if (n == 0)
           n = cast_int(L->top.p - ra) - 1;  /* get up to the top */
         else
@@ -1856,12 +1858,11 @@ void luaV_execute (lua_State *L, CallInfo *ci) {
           last += GETARG_Ax(*pc) * (MAXARG_C + 1);
           pc++;
         }
-        if (last > luaH_realasize(h))  /* needs more space? */
+        if (--last > luaH_realasize(h))  /* needs more space? */
           luaH_resizearray(L, h, last);  /* preallocate it at once */
         for (; n > 0; n--) {
           TValue *val = s2v(ra + n);
-          setobj2t(L, &h->array[last - 1], val);
-          last--;
+          setobj2t(L, &h->array[--last], val);
           luaC_barrierback(L, obj2gco(h), val);
         }
         vmbreak;
